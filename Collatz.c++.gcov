        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 8 returned 100% blocks executed 71%
        8:   25:pair<int, int> collatz_read (const string& s) {
        8:   26:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   27:    int i;
        -:   28:    int j;
        8:   29:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        8:   30:    assert (i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        8:   31:    assert (j > 0); 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        8:   32:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   33:
        -:   34:// ------------
        -:   35:// collatz_eval
        -:   36:// ------------
        -:   37:
function _Z12collatz_evalii called 11 returned 100% blocks executed 83%
       11:   38:int collatz_eval (int i, int j) {
        -:   39:    //Set i as lower bound and j as uppper
       11:   40:    int max =1;
        -:   41:    int cur;
       11:   42:    if (i>j){
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        1:   43:        cur=j;
        1:   44:        j=i;
        1:   45:        i=cur;
        -:   46:    }
       11:   47:    assert (i>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       11:   48:    assert (j< 100000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   49:    
       11:   50:    if (i <= j/2 +1){
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        6:   51:        i=j/2+1;
        -:   52:    }
       11:   53:    int cycles=1;
      550:   54:    for (int c=i; c<=j; c++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      539:   55:        cycles=1;
      539:   56:        cur=c; //cur is the current value/ mover for the func
        -:   57:        //loop for collatz
    22464:   58:        while (cur!=1){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    21386:   59:            if ((cur%2) == 0){
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
    10890:   60:                cur /= 2;
    10890:   61:                ++cycles;
        -:   62:            }
        -:   63:            else{
    10496:   64:                cur=cur+ (cur/2)+1; // (3n+1)/2
    10496:   65:                cycles+=2;
        -:   66:            }
        -:   67:        }
      539:   68:        assert (cycles>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      539:   69:        if (cycles>max)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       41:   70:            max=cycles;
        -:   71:    }
        -:   72:    
        -:   73:    // if x%2==0, >>1, else x=x+x/2+1
        -:   74:    //
        -:   75:    // <your code>
       11:   76:    assert (max>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       11:   77:    return max;}
        -:   78:
        -:   79:// -------------
        -:   80:// collatz_print
        -:   81:// -------------
        -:   82:
function _Z13collatz_printRSoiii called 7 returned 100% blocks executed 77%
        7:   83:void collatz_print (ostream& w, int i, int j, int v) {
        7:   84:    assert (i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        7:   85:    assert (j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        7:   86:    assert (v > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        7:   87:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   88:
        -:   89:// -------------
        -:   90:// collatz_solve
        -:   91:// -------------
        -:   92:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 80%
        2:   93:void collatz_solve (istream& r, ostream& w) {
        2:   94:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9:   95:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 71%
branch  7 taken 29% (fallthrough)
        5:   96:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:   97:        const int            i = p.first;
        5:   98:        const int            j = p.second;
        5:   99:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       10:  100:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
