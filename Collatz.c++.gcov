        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 5 returned 100% blocks executed 80%
        5:   25:pair<int, int> collatz_read (const string& s) {
        5:   26:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   27:    int i;
        -:   28:    int j;
        5:   29:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5:   30:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   31:
        -:   32:// ------------
        -:   33:// collatz_eval
        -:   34:// ------------
        -:   35:
function _Z12collatz_evalii called 8 returned 100% blocks executed 100%
        8:   36:int collatz_eval (int i, int j) {
        -:   37:    //Set i as lower bound and j as uppper
        -:   38:    /*
        -:   39:    int max =1;
        -:   40:    int cur;
        -:   41:    if (i>j){
        -:   42:        cur=j;
        -:   43:        j=i;
        -:   44:        i=cur;
        -:   45:    }
        -:   46:    if (i <= j/2 +1){
        -:   47:        i=j/2+1;
        -:   48:    }
        -:   49:    
        -:   50:    int cycles=1;
        -:   51:    for (int c=i; c<=j; c++){
        -:   52:        cur=c;
        -:   53:        //loop for collatz
        -:   54:        while (cur!=1){
        -:   55:            if (cur%2==0)
        -:   56:                cur/=2;
        -:   57:            else
        -:   58:                cur=cur+ (cur/2)+1; // (3n+1)/2
        -:   59:            cycles++;
        -:   60:        }
        -:   61:
        -:   62:    }
        -:   63:    */
        -:   64:    // if x%2==0, >>1, else x=x+x/2+1
        -:   65:    //
        -:   66:    // <your code>
        8:   67:    return 1;}
        -:   68:
        -:   69:// -------------
        -:   70:// collatz_print
        -:   71:// -------------
        -:   72:
function _Z13collatz_printRSoiii called 5 returned 100% blocks executed 100%
        5:   73:void collatz_print (ostream& w, int i, int j, int v) {
        5:   74:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   75:
        -:   76:// -------------
        -:   77:// collatz_solve
        -:   78:// -------------
        -:   79:
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 80%
        1:   80:void collatz_solve (istream& r, ostream& w) {
        1:   81:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:   82:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
        4:   83:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   84:        const int            i = p.first;
        4:   85:        const int            j = p.second;
        4:   86:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:   87:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
