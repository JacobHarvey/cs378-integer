        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:int CACHESIZE = 100000;
        -:   22:#define CACHE true
        -:   23:#ifdef CACHE
        -:   24:int cache [100000];
        -:   25:#endif
        -:   26:
        -:   27:// ------------
        -:   28:// collatz_read
        -:   29:// ------------
        -:   30:int collatz_eval_simple (int i, int j);
function _Z12collatz_readRKSs called 12 returned 100% blocks executed 71%
       12:   31:pair<int, int> collatz_read (const string& s) {
       12:   32:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   33:    int i;
        -:   34:    int j;
       12:   35:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       12:   36:    assert (i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       12:   37:    assert (j > 0); 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       12:   38:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   39:
        -:   40:// ------------
        -:   41:// collatz_eval
        -:   42:// ------------
        -:   43:
function _Z12collatz_evalii called 15 returned 100% blocks executed 84%
       15:   44:int collatz_eval (int i, int j) {
        -:   45:    if (!CACHE){
        -:   46:        return collatz_eval_simple(i, j);
        -:   47:    }
        -:   48:    //Set i as lower bound and j as uppper
       15:   49:    int max =1;
        -:   50:    int cur;
       15:   51:    if (i>j){
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:   52:        cur=j;
        1:   53:        j=i;
        1:   54:        i=cur;
        -:   55:    }
       15:   56:    assert (i>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       15:   57:    assert (j< 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       15:   58:    assert (CACHESIZE > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       15:   59:    if (i <= j/2 +1){
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        8:   60:        i=j/2+1;
        -:   61:    }
       15:   62:    int cycles=1;
      770:   63:    for (int c=i; c<=j; c++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      755:   64:        cycles=1;
      755:   65:        cur=c; //cur is the current value/ mover for the func
        -:   66:        //loop for collatz
     3276:   67:        while (cur!=1){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2517:   68:            if (cur < CACHESIZE && cache[cur]!= 0){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 30% (fallthrough)
branch  3 taken 70%
      751:   69:                cycles += cache[cur] -1;
      751:   70:                break;
        -:   71:            }
     1766:   72:            else if ((cur%2) == 0){
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
      902:   73:                cur /= 2;
      902:   74:                ++cycles;
        -:   75:            }
        -:   76:            else{
      864:   77:                cur=cur+ (cur/2)+1; // (3n+1)/2
      864:   78:                cycles+=2;
        -:   79:            }
        -:   80:        }
      755:   81:        if (c < CACHESIZE){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      755:   82:            cache[c] = cycles;
        -:   83:        }
      755:   84:        assert (cycles>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      755:   85:        if (cycles>max)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       58:   86:            max=cycles;
        -:   87:    }
        -:   88:    
        -:   89:    // if x%2==0, >>1, else x=x+x/2+1
        -:   90:    //
        -:   91:    // <your code>
       15:   92:    assert (max>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       15:   93:    return max;}
        -:   94:
function _Z19collatz_eval_simpleii called 0 returned 0% blocks executed 0%
    #####:   95:int collatz_eval_simple (int i, int j){
    #####:   96:    int max =1;
        -:   97:    int cur;
    #####:   98:    if (i>j){
branch  0 never executed
branch  1 never executed
    #####:   99:        cur=j;
    #####:  100:        j=i;
    #####:  101:        i=cur;
        -:  102:    }
    #####:  103:    assert (i>0);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  104:    assert (j< 1000000);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  105:    
    #####:  106:    if (i <= j/2 +1){
branch  0 never executed
branch  1 never executed
    #####:  107:        i=j/2+1;
        -:  108:    }
    #####:  109:    int cycles=1;
    #####:  110:    for (int c=i; c<=j; c++){
branch  0 never executed
branch  1 never executed
    #####:  111:        cycles=1;
    #####:  112:        cur=c; //cur is the current value/ mover for the func
        -:  113:        //loop for collatz
    #####:  114:        while (cur!=1){
branch  0 never executed
branch  1 never executed
    #####:  115:            if ((cur%2) == 0){
branch  0 never executed
branch  1 never executed
    #####:  116:                cur /= 2;
    #####:  117:                ++cycles;
        -:  118:            }
        -:  119:            else{
    #####:  120:                cur=cur+ (cur/2)+1; // (3n+1)/2
    #####:  121:                cycles+=2;
        -:  122:            }
        -:  123:        }
    #####:  124:        assert (cycles>0);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  125:        if (cycles>max)
branch  0 never executed
branch  1 never executed
    #####:  126:            max=cycles;
        -:  127:    }
        -:  128:    
        -:  129:    // if x%2==0, >>1, else x=x+x/2+1
        -:  130:    //
        -:  131:    // <your code>
    #####:  132:    assert (max>0);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  133:    return max;}
        -:  134:// -------------
        -:  135:// collatz_print
        -:  136:// -------------
        -:  137:
function _Z13collatz_printRSoiii called 11 returned 100% blocks executed 77%
       11:  138:void collatz_print (ostream& w, int i, int j, int v) {
       11:  139:    assert (i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       11:  140:    assert (j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       11:  141:    assert (v > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       11:  142:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  143:
        -:  144:// -------------
        -:  145:// collatz_solve
        -:  146:// -------------
        -:  147:
function _Z13collatz_solveRSiRSo called 3 returned 100% blocks executed 80%
        3:  148:void collatz_solve (istream& r, ostream& w) {
        3:  149:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       15:  150:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 75%
branch  7 taken 25% (fallthrough)
        9:  151:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9:  152:        const int            i = p.first;
        9:  153:        const int            j = p.second;
        9:  154:        const int            v = collatz_eval(i, j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _GLOBAL__sub_I_CACHESIZE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       15:  155:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
