        -:    0:Source:Integer.h
        -:    0:Graph:TestInteger.gcno
        -:    0:Data:TestInteger.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ------------------------------
        -:    2:// projects/c++/integer/Integer.h
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ------------------------------
        -:    6:
        -:    7:#ifndef Integer_h
        -:    8:#define Integer_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <cassert>   // assert
        -:   15:#include <iostream>  // ostream
        -:   16:#include <stdexcept> // invalid_argument
        -:   17:#include <string>    // string
        -:   18:#include <vector>    // vector
        -:   19:#include <deque>
        -:   20:// -----------------
        -:   21:// shift_left_digits
        -:   22:// -----------------
        -:   23:
        -:   24:/**
        -:   25: * @param b an iterator to the beginning of an input  sequence (inclusive)
        -:   26: * @param e an iterator to the end       of an input  sequence (exclusive)
        -:   27: * @param x an iterator to the beginning of an output sequence (inclusive)
        -:   28: * @return  an iterator to the end       of an output sequence (exclusive)
        -:   29: * the sequences are of decimal digits
        -:   30: * output the shift left of the input sequence into the output sequence
        -:   31: * ([b, e) << n) => x
        -:   32: */
        -:   33:using namespace std;
        -:   34:template <typename II, typename OI>
function _Z17shift_left_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_iS7_ called 3 returned 100% blocks executed 100%
        3:   35:OI shift_left_digits (II b, II e, int n, OI x) {
        -:   36:    	// <your code> - edited
        -:   37:	//this is if we have the least significant digit first
       22:   38:	while (n > 0){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
       16:   39:                *x = 0;
call    0 returned 100%
       16:   40:                ++x;
call    0 returned 100%
       16:   41:		--n;
        -:   42:        }
       14:   43:	while(b != e){
call    0 returned 100%
branch  1 taken 73%
branch  2 taken 27% (fallthrough)
        8:   44:		*x = *b;
call    0 returned 100%
call    1 returned 100%
        8:   45:		++x;
call    0 returned 100%
        8:   46:		++b;
call    0 returned 100%
        -:   47:	}
        -:   48:	
        3:   49:    	return x;}
        -:   50:
        -:   51:// ------------------
        -:   52:// shift_right_digits
        -:   53:// ------------------
        -:   54:
        -:   55:/**
        -:   56: * @param b an iterator to the beginning of an input  sequence (inclusive)
        -:   57: * @param e an iterator to the end       of an input  sequence (exclusive)
        -:   58: * @param x an iterator to the beginning of an output sequence (inclusive)
        -:   59: * @return  an iterator to the end       of an output sequence (exclusive)
        -:   60: * the sequences are of decimal digits
        -:   61: * output the shift right of the input sequence into the output sequence
        -:   62: * ([b, e) >> n) => x
        -:   63: */
        -:   64:template <typename II, typename OI>
function _Z18shift_right_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_iS7_ called 3 returned 100% blocks executed 100%
        3:   65:OI shift_right_digits (II b, II e, int n, OI x) {
        -:   66:    	// <your code> - edited
        3:   67:	b += n;
call    0 returned 100%
       11:   68:	while(b != e){
call    0 returned 100%
branch  1 taken 63%
branch  2 taken 38% (fallthrough)
        5:   69:		*x = *b;
call    0 returned 100%
call    1 returned 100%
        5:   70:		++x;
call    0 returned 100%
        5:   71:		++b;
call    0 returned 100%
        -:   72:	}
        3:   73:    	return x;}
        -:   74:
        -:   75:// -----------
        -:   76:// plus_digits
        -:   77:// -----------
        -:   78:
        -:   79:/**
        -:   80: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:   81: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:   82: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:   83: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:   84: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:   85: * @return   an iterator to the end       of an output sequence (exclusive)
        -:   86: * the sequences are of decimal digits
        -:   87: * output the sum of the two input sequences into the output sequence
        -:   88: * ([b1, e1) + [b2, e2)) => x
        -:   89: */
        -:   90:template <typename II1, typename II2, typename OI>
function _Z11plus_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_S6_ET1_T_S8_T0_S9_S7_ called 3 returned 100% blocks executed 100%
        3:   91:OI plus_digits (II1 b1, II1 e1, II2 b2, II2 e2, OI x) {
        -:   92:    	// <your code> - edited
        3:   93:	int carry = 0;
       15:   94:	while(b1 != e1 || b2 != e2){
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
call    3 returned 100%
branch  4 taken 40% (fallthrough)
branch  5 taken 60%
branch  6 taken 75%
branch  7 taken 25% (fallthrough)
        9:   95:		*x += carry;
call    0 returned 100%
        9:   96:		if(b1 != e1){
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
        7:   97:			*x += *b1;
call    0 returned 100%
call    1 returned 100%
        7:   98:			++b1;
call    0 returned 100%
        -:   99:		}
        9:  100:		if(b2 != e2){
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
        8:  101:			*x += *b2;
call    0 returned 100%
call    1 returned 100%
        8:  102:			++b2;
call    0 returned 100%
        -:  103:		}
        9:  104:		carry = *x / 10;
call    0 returned 100%
        9:  105:		*x %= 10;
call    0 returned 100%
        9:  106:		++x;
call    0 returned 100%
        -:  107:	}
        3:  108:	if(carry != 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  109:		*x = carry;
call    0 returned 100%
        1:  110:		++x;
call    0 returned 100%
        -:  111:	}
        3:  112:    	return x;}
        -:  113:
        -:  114:// ------------
        -:  115:// minus_digits
        -:  116:// ------------
        -:  117:
        -:  118:/**
        -:  119: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:  120: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:  121: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:  122: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:  123: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:  124: * @return   an iterator to the end       of an output sequence (exclusive)
        -:  125: * the sequences are of decimal digits
        -:  126: * output the difference of the two input sequences into the output sequence
        -:  127: * ([b1, e1) - [b2, e2)) => x
        -:  128: */
        -:  129:template <typename II1, typename II2, typename OI>
function _Z12minus_digitsIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EES9_ET1_T_SB_T0_SC_SA_ called 0 returned 0% blocks executed 0%
function _Z12minus_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS1_IPKiS5_EES6_ET1_T_SB_T0_SC_SA_ called 3 returned 100% blocks executed 100%
function _Z12minus_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_S6_ET1_T_S8_T0_S9_S7_ called 3 returned 100% blocks executed 95%
        6:  130:OI minus_digits (II1 b1, II1 e1, II2 b2, II2 e2, OI x) {
        -:  131:    	// <your code> - editing
        6:  132:	bool remove = false;
       29:  133:	while(b1 != e1){
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 73%
branch  5 taken 27% (fallthrough)
call    6 returned 100%
branch  7 taken 75%
branch  8 taken 25% (fallthrough)
       17:  134:        int temp = *b1;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       17:  135:		if(remove){
branch  0 never executed
branch  1 never executed
branch  2 taken 38% (fallthrough)
branch  3 taken 63%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
        6:  136:			--temp;
        6:  137:			remove = false;
        -:  138:		}
       17:  139:		if(b2 != e2){
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 63% (fallthrough)
branch  5 taken 38%
call    6 returned 100%
branch  7 taken 78% (fallthrough)
branch  8 taken 22%
       12:  140:			int temp2 = *b2;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       12:  141:			if(temp < temp2){
branch  0 never executed
branch  1 never executed
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
        4:  142:				remove = true;
        4:  143:				temp += 10;
        -:  144:			}
       12:  145:			*x = temp - temp2;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       12:  146:			++b2;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  147:		}
        -:  148:		else{
        5:  149:			if (temp == -1){
branch  0 never executed
branch  1 never executed
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  150:				temp += 10;
        2:  151:				remove = true;
        -:  152:			}
        5:  153:			*x = temp;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  154:		}
       17:  155:		++b1;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       17:  156:		++x;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  157:		
        -:  158:	}
        -:  159:	
        6:  160:    	return x;}
        -:  161:
        -:  162:// -----------------
        -:  163:// multiplies_digits
        -:  164:// -----------------
        -:  165:
        -:  166:/**
        -:  167: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:  168: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:  169: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:  170: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:  171: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:  172: * @return   an iterator to the end       of an output sequence (exclusive)
        -:  173: * the sequences are of decimal digits
        -:  174: * output the product of the two input sequences into the output sequence
        -:  175: * ([b1, e1) * [b2, e2)) => x
        -:  176: */
        -:  177:
        -:  178:template <typename II1, typename II2, typename FI>
function _Z17multiplies_digitsIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EES9_ET1_T_SB_T0_SC_SA_ called 9 returned 100% blocks executed 96%
function _Z17multiplies_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_S6_ET1_T_S8_T0_S9_S7_ called 4 returned 100% blocks executed 96%
       13:  179:FI multiplies_digits (II1 b1, II1 e1, II2 b2, II2 e2, FI x) {
       13:  180:    int add=0;
       13:  181:    auto b2_t = b2;
       49:  182:    while (b1!=e1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 55%
branch  4 taken 45% (fallthrough)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 75%
branch  9 taken 25% (fallthrough)
       23:  183:        auto output = x;
       23:  184:        add=0;
       23:  185:        int carry = 0;
       23:  186:        int var_1 = *b1;
call    0 returned 100%
call    1 returned 100%
        -:  187:        //cout << *b1 << endl;
       23:  188:        b2_t = b2;
       91:  189:        while (b2_t!=e2){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 66%
branch  4 taken 34% (fallthrough)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 67%
branch  9 taken 33% (fallthrough)
       45:  190:            int temp = carry + (var_1 * *b2_t) + *output;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  191:            //cout << temp << "  ";
       45:  192:            carry = temp / 10;
       45:  193:            *output = temp % 10;
call    0 returned 100%
call    1 returned 100%
       45:  194:            ++output;
call    0 returned 100%
call    1 returned 100%
       45:  195:            ++b2_t;
call    0 returned 100%
call    1 returned 100%
        -:  196:        }
       53:  197:        while (carry!=0){
branch  0 taken 27%
branch  1 taken 73% (fallthrough)
branch  2 taken 20%
branch  3 taken 80% (fallthrough)
        7:  198:            ++add;
        7:  199:            *output+=carry%10;
call    0 returned 100%
call    1 returned 100%
        7:  200:            carry/=10;
        7:  201:            ++output;
call    0 returned 100%
call    1 returned 100%
        -:  202:        }
        -:  203:        //cout << endl;
       23:  204:        ++b1;
call    0 returned 100%
call    1 returned 100%
        -:  205:        //++temp;
       23:  206:        ++x;
call    0 returned 100%
call    1 returned 100%
        -:  207:    }
       13:  208:    return x+add;}
call    0 returned 100%
call    1 returned 100%
        -:  209:
        -:  210:
        -:  211:// --------------
        -:  212:// divides_digits
        -:  213:// --------------
        -:  214:
        -:  215:/**
        -:  216: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:  217: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:  218: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:  219: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:  220: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:  221: * @return   an iterator to the end       of an output sequence (exclusive)
        -:  222: * the sequences are of decimal digits
        -:  223: * output the division of the two input sequences into the output sequence
        -:  224: * ([b1, e1) / [b2, e2)) => x
        -:  225: */
        -:  226:template <typename II1, typename II2, typename FI>
        -:  227:FI divides_digits (II1 b1, II1 e1, II2 b2, II2 e2, FI x) {
        -:  228:    // <your code>
        -:  229:    return x;}
        -:  230:
        -:  231:// -------
        -:  232:// Integer
        -:  233:// -------
        -:  234:
        -:  235:template < typename T, typename C = std::vector<T> >
function _ZN7IntegerIiSt6vectorIiSaIiEEEC2ERKS3_ called 20 returned 100% blocks executed 100%
function _ZN7IntegerIiSt6vectorIiSaIiEEEaSERKS3_ called 12 returned 100% blocks executed 100%
function _ZN7IntegerIiSt6vectorIiSaIiEEEaSEOS3_ called 5 returned 100% blocks executed 100%
function _ZN7IntegerIiSt5dequeIiSaIiEEED2Ev called 3 returned 100% blocks executed 100%
function _ZN7IntegerIiSt6vectorIiSaIiEEED2Ev called 76 returned 100% blocks executed 100%
      116:  236:class Integer {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  237:    // -----------
        -:  238:    // operator ==
        -:  239:    // -----------
        -:  240:
        -:  241:    /**
        -:  242:     * <your documentation>
        -:  243:     */
function _ZeqRK7IntegerIiSt6vectorIiSaIiEEES5_ called 15 returned 100% blocks executed 95%
       15:  244:    friend bool operator == (const Integer& lhs, const Integer& rhs) {
        -:  245:        // <your code> - editing
       15:  246:	auto b1 = lhs._x.begin();
call    0 returned 100%
       15:  247:	auto e1 = lhs._x.end();
call    0 returned 100%
       15:  248:	auto b2 = rhs._x.begin();
call    0 returned 100%
       15:  249:	auto e2 = rhs._x.end();
call    0 returned 100%
       15:  250:	if((e2-b2) != (e1-b1))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  251:		return false;
       59:  252:	while(b1 != e1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 70%
branch  4 taken 30% (fallthrough)
       31:  253:		int temp = *b1;
call    0 returned 100%
       31:  254:		int temp2 = *b2;
call    0 returned 100%
        -:  255:		//printf("%d, %d\n", temp, temp2);
       31:  256:		if(temp != temp2)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        2:  257:			return false;
       29:  258:		++b1;
call    0 returned 100%
       29:  259:		++b2;
call    0 returned 100%
        -:  260:	}
       13:  261:        return true;}
        -:  262:
        -:  263:    // -----------
        -:  264:    // operator !=
        -:  265:    // -----------
        -:  266:
        -:  267:    /**
        -:  268:     * <your documentation>
        -:  269:     */
function _ZneRK7IntegerIiSt6vectorIiSaIiEEES5_ called 2 returned 100% blocks executed 100%
        2:  270:    friend bool operator != (const Integer& lhs, const Integer& rhs) {
        2:  271:        return !(lhs == rhs);}
call    0 returned 100%
        -:  272:
        -:  273:    // ----------
        -:  274:    // operator <
        -:  275:    // ----------
        -:  276:
        -:  277:    /**
        -:  278:     * @param lhs const Integer class 
        -:  279:     * @param rhs const Integer class 
        -:  280:     * @return   a boolan value if lhs < rhs
        -:  281:     * determines if the Integer lhs < Integer rhs
        -:  282:     */
function _ZltRK7IntegerIiSt6vectorIiSaIiEEES5_ called 4 returned 100% blocks executed 77%
        4:  283:    friend bool operator < (const Integer& lhs, const Integer& rhs) {
        -:  284:        // <your code>
        4:  285:	if(lhs.neg && !rhs.neg)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  286:		return true;
        4:  287:	else if (!lhs.neg && rhs.neg)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  288:		return false;
        -:  289:	else{
        4:  290:        auto b1 = lhs._x.begin();
call    0 returned 100%
        4:  291:        auto e1 = lhs._x.end();
call    0 returned 100%
        4:  292:        auto b2 = rhs._x.begin();
call    0 returned 100%
        4:  293:        auto e2 = rhs._x.end();
call    0 returned 100%
        4:  294:		int l = 0;
        4:  295:		int r = 0;
        4:  296:		int i = 1;
       15:  297:		while(b1 != e1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 64%
branch  4 taken 36% (fallthrough)
        7:  298:			l += (*b1 * i);
call    0 returned 100%
        7:  299:			i *= 10;
        7:  300:			++b1;
call    0 returned 100%
        -:  301:		}	
        4:  302:		i = 1;
       18:  303:		while(b2 != e2){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 71%
branch  4 taken 29% (fallthrough)
       10:  304:                        r += (*b2 * i);
call    0 returned 100%
       10:  305:                        i *= 10;
       10:  306:                        ++b2;
call    0 returned 100%
        -:  307:                }
        4:  308:		if(!lhs.neg && l < r)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:  309:			return true;
    #####:  310:		else if(lhs.neg && r < l)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  311:			return true;
        -:  312:		else
    #####:  313:			return false;	
        -:  314:	}
        -:  315:    }
        -:  316:
        -:  317:    // -----------
        -:  318:    // operator <=
        -:  319:    // -----------
        -:  320:
        -:  321:    /**
        -:  322:     * @param lhs const Integer class 
        -:  323:     * @param rhs const Integer class 
        -:  324:     * @return   a boolan value if lhs <= rhs
        -:  325:     * determines if the Integer lhs <= Integer rhs
        -:  326:     */
        -:  327:    friend bool operator <= (const Integer& lhs, const Integer& rhs) {
        -:  328:        return !(rhs < lhs);}
        -:  329:
        -:  330:    // ----------
        -:  331:    // operator >
        -:  332:    // ----------
        -:  333:
        -:  334:    /**
        -:  335:     * @param lhs const Integer class 
        -:  336:     * @param rhs const Integer class 
        -:  337:     * @return   a boolan value if lhs > rhs
        -:  338:     * determines if the Integer lhs > Integer rhs 
        -:  339:     * */
function _ZgtRK7IntegerIiSt6vectorIiSaIiEEES5_ called 3 returned 100% blocks executed 100%
        3:  340:    friend bool operator > (const Integer& lhs, const Integer& rhs) {
        3:  341:        return (rhs < lhs);}
call    0 returned 100%
        -:  342:
        -:  343:    // -----------
        -:  344:    // operator >=
        -:  345:    // -----------
        -:  346:
        -:  347:    /**
        -:  348:     * @param lhs const Integer class 
        -:  349:     * @param rhs const Integer class 
        -:  350:     * @return   a boolan value if lhs > rhs
        -:  351:     * determines if the Integer lhs > Integer rhs 
        -:  352:     * */
        -:  353:    friend bool operator >= (const Integer& lhs, const Integer& rhs) {
        -:  354:        return !(lhs < rhs);}
        -:  355:
        -:  356:    // ----------
        -:  357:    // operator +
        -:  358:    // ----------
        -:  359:
        -:  360:    /**
        -:  361:     * @param lhs Integer class 
        -:  362:     * @param rhs const Integer class 
        -:  363:     * @return  r-value of lhs + rhs
        -:  364:     * Calls lhs+=rhs. 
        -:  365:     * Adds rhs to lhs. 
        -:  366:     * Lhs is modified 
        -:  367:     */
        -:  368:    friend Integer operator + (Integer lhs, const Integer& rhs) {
        -:  369:        return lhs += rhs;}
        -:  370:
        -:  371:    // ----------
        -:  372:    // operator -
        -:  373:    // ----------
        -:  374:
        -:  375:    /**
        -:  376:     * @param lhs Integer class 
        -:  377:     * @param rhs const Integer class 
        -:  378:     * @return  l-value lhs.
        -:  379:     * lhs= lhs-rhs
        -:  380:     * Calls -=
        -:  381:     */
        -:  382:    friend Integer operator - (Integer lhs, const Integer& rhs) {
        -:  383:	return lhs -= rhs;}
        -:  384:
        -:  385:    // ----------
        -:  386:    // operator *
        -:  387:    // ----------
        -:  388:
        -:  389:    /**
        -:  390:     * @param lhs Integer class 
        -:  391:     * @param rhs const Integer class 
        -:  392:     * @return  l-value lhs.
        -:  393:     * lhs= lhs*rhs
        -:  394:     * Calls *=
        -:  395:     */
function _Zml7IntegerIiSt6vectorIiSaIiEEERKS3_ called 6 returned 100% blocks executed 100%
        6:  396:    friend Integer operator * (Integer lhs, const Integer& rhs) {
        6:  397:        return lhs *= rhs;}
call    0 returned 100%
call    1 returned 100%
        -:  398:
        -:  399:    // ----------
        -:  400:    // operator /
        -:  401:    // ----------
        -:  402:
        -:  403:    /**
        -:  404:     * @param lhs Integer class 
        -:  405:     * @param rhs const Integer class 
        -:  406:     * @return  l-value lhs.
        -:  407:     * lhs= lhs/rhs
        -:  408:     * Calls /=
        -:  409:     * @throws invalid_argument if (rhs == 0)
        -:  410:     */
        -:  411:    friend Integer operator / (Integer lhs, const Integer& rhs) {
        -:  412:
        -:  413:        if (rhs.size() == 0 || rhs.size()==1 && rhs._x[0]==0)
        -:  414:            throw std::invalid_argument("integer::integer()");
        -:  415:        return lhs /= rhs;}
        -:  416:
        -:  417:    // ----------
        -:  418:    // operator %
        -:  419:    // ----------
        -:  420:
        -:  421:    /**
        -:  422:     * @param lhs Integer class 
        -:  423:     * @param rhs const Integer class 
        -:  424:     * @return  l-value lhs.
        -:  425:     * lhs= lhs % rhs
        -:  426:     * Calls %=
        -:  427:     * @throws invalid_argument if (rhs <= 0)
        -:  428:     */
        -:  429:    friend Integer operator % (Integer lhs, const Integer& rhs) {
        -:  430:        if (rhs<=0)
        -:  431:            throw std::invalid_argument("integer::integer()");
        -:  432:        return lhs %= rhs;}
        -:  433:
        -:  434:    // -----------
        -:  435:    // operator <<
        -:  436:    // -----------
        -:  437:
        -:  438:    /**
        -:  439:     * @param lhs Integer class 
        -:  440:     * @param int rhs 
        -:  441:     * @return  lhs<<rhs
        -:  442:     * lhs= lhs << rhs
        -:  443:     * Calls <<=
        -:  444:     * if lhs== 100, rhs==2, return==10000
        -:  445:     * @throws invalid_argument if (rhs < 0)
        -:  446:     */
        -:  447:    friend Integer operator << (Integer lhs, int rhs) {
        -:  448:        if (rhs<0)
        -:  449:            throw std::invalid_argument("Integer::Integer()");
        -:  450:        return lhs <<= rhs;}
        -:  451:
        -:  452:    // -----------
        -:  453:    // operator >>
        -:  454:    // -----------
        -:  455:
        -:  456:    /**
        -:  457:     * @param lhs Integer class 
        -:  458:     * @param rhs const Integer class 
        -:  459:     * @return  l-value lhs.
        -:  460:     * lhs= lhs % rhs
        -:  461:     * Calls <<=
        -:  462:     * @throws invalid_argument if (rhs < 0)
        -:  463:
        -:  464:     * @throws invalid_argument if (rhs < 0)
        -:  465:     */
        -:  466:    friend Integer operator >> (Integer lhs, int rhs) {
        -:  467:        if (rhs<0)
        -:  468:            throw std::invalid_argument("Integer::Integer()");
        -:  469:        return lhs >>= rhs;}
        -:  470:
        -:  471:    // -----------
        -:  472:    // operator <<
        -:  473:    // -----------
        -:  474:
        -:  475:    /**
        -:  476:     * @param lhs ostream 
        -:  477:     * @param const Integer rhs
        -:  478:     * @return  void
        -:  479:     * Outputs rhs to lhs
        -:  480:     * Outputs the largest value to smallest, so
        -:  481:     * rhs= Integer <T,C> (12345),
        -:  482:     * output= 12345
        -:  483:     * Goes from end of rhs._x to begining
        -:  484:     */
        -:  485:    friend std::ostream& operator << (std::ostream& lhs, const Integer& rhs) {
        -:  486:        	// <your code> - edited
        -:  487:		auto e = rhs._x.end();
        -:  488:		auto b = rhs._x.begin();
        -:  489:		while(e != b){
        -:  490:			--e;
        -:  491:            lhs << *e;
        -:  492:				
        -:  493:		}
        -:  494:        	return lhs << std::endl;}
        -:  495:
        -:  496:    // ---
        -:  497:    // abs
        -:  498:    // ---
        -:  499:
        -:  500:    /**
        -:  501:     * absolute value
        -:  502:     * @param Integer x
        -:  503:     * @return Integer x. 
        -:  504:     * Makes x positive
        -:  505:     */
        -:  506:    friend Integer abs (Integer x) {
        -:  507:        return x.abs();}
        -:  508:
        -:  509:    // ---
        -:  510:    // pow
        -:  511:    // ---
        -:  512:
        -:  513:    /**
        -:  514:     * power
        -:  515:     * @param Integer x
        -:  516:     * @param int e
        -:  517:     * @return l-value x, x= x^e.
        -:  518:     * @throws invalid_argument if ((x == 0) && (e == 0)) || (e < 0)
        -:  519:     * calls .pow()
        -:  520:     * throw handled in .pow()
        -:  521:     * Raises x to the power of e
        -:  522:     */
        -:  523:    friend Integer pow (Integer x, int e) {
        -:  524:        return x.pow(e);}
        -:  525:
        -:  526:    private:
        -:  527:        // ----
        -:  528:        // data
        -:  529:        // ----
        -:  530:
        -:  531:        C _x; // the backing container
        -:  532:	    bool neg; //used to tell if negative or not
        -:  533:
        -:  534:    private:
        -:  535:        // -----
        -:  536:        // valid
        -:  537:        // -----
        -:  538:
function _ZNK7IntegerIiSt5dequeIiSaIiEEE5validEv called 3 returned 100% blocks executed 84%
function _ZNK7IntegerIiSt6vectorIiSaIiEEE5validEv called 58 returned 100% blocks executed 95%
       61:  539:        bool valid () const { // class invariant
       61:  540:            auto iter = _x.begin();
call    0 returned 100%
call    1 returned 100%
      308:  541:            while (iter != _x.end()){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 88%
branch  5 taken 12% (fallthrough)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 75%
branch 11 taken 25% (fallthrough)
      188:  542:                if (*iter<0 || *iter>9)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 returned 100%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        2:  543:                    return false;
      186:  544:                ++iter;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  545:            }
       59:  546:            return true;}
        -:  547:
        -:  548:    public:
        -:  549:        // ------------
        -:  550:        // constructors
        -:  551:        // ------------
        -:  552:
        -:  553:        /**
        -:  554:         * @param value, makes an Integer class with default container of vector<int>
        -:  555:         * @return returns an Integer variable where the container within holds a parsed int variable
        -:  556:         * So if Integer(123) was called, _x[0]==3, _x[1]==2, _x[2]==3
        -:  557:         * Can take in negative values
        -:  558:         * @throws exception if value is not valid
        -:  559:         * */
function _ZN7IntegerIiSt5dequeIiSaIiEEEC2Ei called 2 returned 100% blocks executed 71%
function _ZN7IntegerIiSt6vectorIiSaIiEEEC2Ei called 55 returned 100% blocks executed 82%
       57:  560:        Integer (int value) {
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 never executed
        -:  561:            	// <your code> - edited
        -:  562:		
       57:  563:        if(value == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
       18:  564:			_x.push_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  565:		}
        -:  566:		else{
       39:  567:	        neg = value<0;
       39:  568:            if (value<0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        3:  569:                value*=-1;
      176:  570:			while(value != 0){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
branch  2 taken 69%
branch  3 taken 31% (fallthrough)
       98:  571:				_x.push_back(value % 10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       98:  572:				value /= 10;
        -:  573:			}
        -:  574:		}
       57:  575:        assert(valid());}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  576:
        -:  577:        /**
        -:  578:         * @param std::string value, makes an Integer class with default container of vector<int>
        -:  579:         * @return returns an Integer variable where the container within holds a parsed int variable
        -:  580:         * Parses the string into the backing container _x
        -:  581:         * So if Integer("123") was called, _x[0]==3, _x[1]==2, _x[2]==3
        -:  582:         * Can take in negative values
        -:  583:         * @throws invalid_argument if value is not a valid representation of an Integer (if a character is passed in instead of a valid number
        -:  584:         */
function _ZN7IntegerIiSt5dequeIiSaIiEEEC2ERKSs called 1 returned 100% blocks executed 44%
function _ZN7IntegerIiSt6vectorIiSaIiEEEC2ERKSs called 3 returned 33% blocks executed 74%
        6:  585:        explicit Integer (const std::string& value) {
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
        4:  586:            bool is_neg=false;
        4:  587:            if (value[0]=='-'){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        1:  588:                neg=true;
        1:  589:                is_neg=true;
        -:  590:            }
       75:  591:            for (int c= value.size()-1; c>=1; c--){
call    0 returned 100%
branch  1 taken 89%
branch  2 taken 11% (fallthrough)
call    3 returned 100%
branch  4 taken 95%
branch  5 taken 5% (fallthrough)
       71:  592:                _x.push_back((int)(value[c]-'0'));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
        -:  593:            }
        4:  594:            if (!is_neg){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        3:  595:                _x.push_back((int)value[0]-'0');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
        -:  596:            }
        4:  597:            if (!valid())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
        2:  598:                throw std::invalid_argument("Integer::Integer()");}
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0% (throw)
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 never executed
call   26 never executed
call   27 never executed
        -:  599:
        -:  600:        // Default copy, destructor, and copy assignment.
        -:  601:        // Integer (const Integer&);
        -:  602:        // ~Integer ();
        -:  603:        // Integer& operator = (const Integer&);
        -:  604:
        -:  605:        // ----------
        -:  606:        // operator -
        -:  607:        // ----------
        -:  608:
        -:  609:        /**
        -:  610:         * @result return negation of *this
        -:  611:         */
function _ZNK7IntegerIiSt6vectorIiSaIiEEEngEv called 2 returned 100% blocks executed 100%
        2:  612:        Integer operator - () const {
        -:  613:            	// <your code> - edited
        2:  614:        Integer<T, C> temp (*this);
call    0 returned 100%
        2:  615:		temp.neg = (!temp.neg);
        2:  616:        return temp;}
        -:  617:
        -:  618:        // -----------
        -:  619:        // operator ++
        -:  620:        // -----------
        -:  621:
        -:  622:        /**
        -:  623:         * @return returns lvalue of this incremented by 1
        -:  624:         * Calls +=1
        -:  625:         */
        -:  626:        Integer& operator ++ () {
        -:  627:            *this += 1;
        -:  628:            return *this;}
        -:  629:
        -:  630:        /**
        -:  631:         * @return returns rvalue of this, then *this is incremented by 1
        -:  632:         */
        -:  633:        Integer operator ++ (int) {
        -:  634:            Integer x = *this;
        -:  635:            ++(*this);
        -:  636:            return x;}
        -:  637:
        -:  638:        // -----------
        -:  639:        // operator --
        -:  640:        // -----------
        -:  641:
        -:  642:        /**
        -:  643:         * @return returns lvalue of *this decremented by 1
        -:  644:         */
        -:  645:        Integer& operator -- () {
        -:  646:            *this -= 1;
        -:  647:            return *this;}
        -:  648:
        -:  649:        /**
        -:  650:         * @return return rvalue of *this, then *this is decremented by 1
        -:  651:         */
        -:  652:        Integer operator -- (int) {
        -:  653:            Integer x = *this;
        -:  654:            --(*this);
        -:  655:            return x;}
        -:  656:
        -:  657:        // -----------
        -:  658:        // operator +=
        -:  659:        // -----------
        -:  660:
        -:  661:        /**
        -:  662:         * @param const Integer& rhs
        -:  663:         * @return lvalue of *this+=rhs
        -:  664:         * lhs= lhs+rhs
        -:  665:         * Does basic integer addition
        -:  666:         */
        -:  667:        Integer& operator += (const Integer& rhs) {
        -:  668:            // <your code>
        -:  669:            auto b1 = _x.begin();
        -:  670:            auto e1 = _x.end();
        -:  671:            auto b2 = rhs._x.begin();
        -:  672:            auto e2 = rhs._x.end();
        -:  673:             int size= rhs._x.size()+_x.size();
        -:  674:            Integer <T,C> temp (0);
        -:  675:            for (int i=0; i<size; i++)
        -:  676:                temp._x.push_back(0);
        -:  677:        
        -:  678:            plus_digits (b1, e1, b2, e2, temp._x.begin());
        -:  679:            //printf ("%d %d %d %d \n", _x[0], _x[1], _x[2], _x[3]);
        -:  680:            auto iter_end = temp._x.end();
        -:  681:            
        -:  682:            if (*(--iter_end)==0 && temp._x.size()!=0){
        -:  683:                temp._x.resize(--size);
        -:  684:            }
        -:  685:            //printf ("size is %d", _x.size()); 
        -:  686:            //_x=temp;
        -:  687:            *this=temp;
        -:  688:            return *this;}
        -:  689:
        -:  690:        // -----------
        -:  691:        // operator -=
        -:  692:        // -----------
        -:  693:
        -:  694:        /**
        -:  695:         * @param const Integer& rhs
        -:  696:         * @return lvalue of *this-=rhs
        -:  697:         * lhs= lhs-rhs
        -:  698:         * Does basic integer subtraction
        -:  699:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEEmIERKS3_ called 3 returned 100% blocks executed 78%
        3:  700:        Integer& operator -= (const Integer& rhs) {
        3:  701:            Integer<T, C> temp (0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  702:           int size= rhs._x.size()+_x.size(); 
call    0 returned 100%
call    1 returned 100%
        -:  703:           /* if(!neg && rhs.neg){
        -:  704:                //rhs.neg = false;
        -:  705:                *this += rhs;
        -:  706:                neg = false;
        -:  707:                return *this;
        -:  708:            }
        -:  709:            else if(neg && !rhs.neg){
        -:  710:                neg = false;
        -:  711:                *this += rhs;
        -:  712:                neg = true;
        -:  713:                return *this;
        -:  714:            }
        -:  715:            else if(neg && rhs.neg){
        -:  716:                for (int i=0; i<size; i++)
        -:  717:                     temp._x.push_back(0);
        -:  718:                //neg=false;
        -:  719:                //rhs.neg=false;
        -:  720:                bool normal =  (*this < rhs);
        -:  721:                if (normal){
        -:  722:                    minus_digits (_x.begin(), _x.end(), rhs._x.begin(), rhs._x.end(), temp._x.begin());
        -:  723:                }
        -:  724:                else{
        -:  725:                    minus_digits (rhs._x.begin(), rhs._x.end(), _x.begin(), _x.end(), temp._x.begin());
        -:  726:                }
        -:  727:
        -:  728:                temp.neg = normal ? rhs.neg:neg;
        -:  729:
        -:  730:            }
        -:  731:            else{*/
        -:  732:                
       16:  733:                for (int i=0; i<size; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       13:  734:                    temp._x.push_back(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  735:
        -:  736:                
        -:  737:		
        3:  738:		bool normal = *this>rhs;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  739:		
        3:  740:		if(_x.size() > rhs._x.size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        1:  741:			normal = true;
        2:  742:		else if(_x.size() < rhs._x.size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  743:			normal  = false;
        -:  744:
        3:  745:                if (normal){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  746:                    minus_digits (_x.begin(), _x.end(), rhs._x.begin(), rhs._x.end(), temp._x.begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
        3:  747:                    temp.neg = false;
        -:  748:                }
        -:  749:                else{
    #####:  750:                    minus_digits (rhs._x.begin(), rhs._x.end(), _x.begin(), _x.end(), temp._x.begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  751:                    temp.neg = true;
        -:  752:                }
        -:  753:            //}
        3:  754:            auto iter_end = temp._x.end();
call    0 returned 100%
       15:  755:            while (*(--iter_end)==0 && temp._x.size()>1){ 
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 75%
branch  8 taken 25% (fallthrough)
        9:  756:		temp._x.pop_back();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  757:            }
        -:  758:
        3:  759:            *this=temp;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  760:            return *this;}
call    0 returned 100%
call    1 never executed
        -:  761:
        -:  762:        // -----------
        -:  763:        // operator *=
        -:  764:        // -----------
        -:  765:
        -:  766:        /**:
        -:  767:         * @param const Integer& rhs
        -:  768:         * @return lvalue of *this*=rhs, lvalue.size() <= *this.size()+rhs.size()
        -:  769:         * lhs= lhs*rhs
        -:  770:         * Does basic integer multiplication
        -:  771:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEEmLERKS3_ called 9 returned 100% blocks executed 91%
        9:  772:        Integer& operator *= (const Integer& rhs) {
        9:  773:            int size= rhs._x.size()+_x.size();
call    0 returned 100%
call    1 returned 100%
        9:  774:            Integer <T,C> temp (0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       35:  775:            for (int i=0; i<size; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
       26:  776:                temp._x.push_back(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9:  777:            multiplies_digits (rhs._x.begin(), rhs._x.end(), _x.begin(), _x.end(), temp._x.begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
        -:  778:            //printf ("%d %d %d %d \n", _x[0], _x[1], _x[2], _x[3]);
        9:  779:            auto iter_end = temp._x.end();
call    0 returned 100%
        -:  780:            
       36:  781:            while (*(--iter_end)==0 && temp._x.size()>1){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 78% (fallthrough)
branch  3 taken 22%
call    4 returned 100%
branch  5 taken 86% (fallthrough)
branch  6 taken 14%
branch  7 taken 67%
branch  8 taken 33% (fallthrough)
       18:  782:                temp._x.pop_back(); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  783:            }
        -:  784:	     
        -:  785:            //_x=temp;
        9:  786:            temp.neg= neg ^ rhs.neg;
        9:  787:            *this=temp;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  788:            
        9:  789:            return *this;}
call    0 returned 100%
call    1 never executed
        -:  790:
        -:  791:        // -----------
        -:  792:        // operator /=
        -:  793:        // -----------
        -:  794:
        -:  795:        /**
        -:  796:         * @param const Integer& rhs
        -:  797:         * @return lvalue of *this/=rhs, lvalue.size() <= *this.size()
        -:  798:         * lhs= lhs*rhs
        -:  799:         * Does basic integer division
        -:  800:         * @throws invalid_argument if (rhs == 0)
        -:  801:         */
        -:  802:        Integer& operator /= (const Integer& rhs) {
        -:  803:            if (rhs._x.size()==0)
        -:  804:                throw std::invalid_argument("Integer::Integer()");
        -:  805:
        -:  806:            // <your code>
        -:  807:            return *this;}
        -:  808:
        -:  809:        // -----------
        -:  810:        // operator %=
        -:  811:        // -----------
        -:  812:
        -:  813:        /**
        -:  814:         * @param const Integer& rhs
        -:  815:         * @return lvalue of *this%=rhs, lvalue.size() <= rhs.size()
        -:  816:         * lhs= lhs%rhs
        -:  817:         * Does basic integer modulo
        -:  818:
        -:  819:         * @throws invalid_argument if (rhs <= 0)
        -:  820:         */
        -:  821:        Integer& operator %= (const Integer& rhs) {
        -:  822:            if (rhs._x.size()==0)
        -:  823:                throw std::invalid_argument("Integer::Integer()");
        -:  824:
        -:  825:
        -:  826:            // <your code>
        -:  827:            return *this;}
        -:  828:
        -:  829:        // ------------
        -:  830:        // operator <<=
        -:  831:        // ------------
        -:  832:        /**
        -:  833:         * @param int n
        -:  834:         * @return lvalue &this<< n time
        -:  835:         * if *this=100, n=2, result *this==10000
        -:  836:         */
        -:  837:        Integer& operator <<= (int n) {
        -:  838:            // <your code>
        -:  839:            return *this;}
        -:  840:
        -:  841:        // ------------
        -:  842:        // operator >>=
        -:  843:        // ------------
        -:  844:
        -:  845:        /**
        -:  846:         * @param int n
        -:  847:         * @return lvalue &this<< n time
        -:  848:         * if *this=100, n=2, result *this==1
        -:  849:         */
        -:  850:        Integer& operator >>= (int n) {
        -:  851:            // <your code>
        -:  852:            return *this;}
        -:  853:
        -:  854:        // ---
        -:  855:        // abs
        -:  856:        // ---
        -:  857:
        -:  858:        /**
        -:  859:         * absolute value
        -:  860:         * @return lvalue |*this|
        -:  861:         */
        -:  862:        Integer& abs () {
        -:  863:            neg=false;
        -:  864:            return *this;}
        -:  865:
        -:  866:        // ---
        -:  867:        // pow
        -:  868:        // ---
        -:  869:
        -:  870:        /**
        -:  871:         * power
        -:  872:         * @param int e, must be >=0
        -:  873:         * @param *this int, _x.size() must be > 0
        -:  874:         * @throws invalid_argument if ((this == 0) && (e == 0)) or (e < 0)
        -:  875:         * raises *this to the power of e, so if *this==3, e==3, result==27
        -:  876:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEE3powEi called 14 returned 86% blocks executed 67%
       14:  877:        Integer& pow (int e) {
       14:  878:            if ((_x.size()==1 && _x[0]==0 && e==0) || e<0 || _x.size()==0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 36% (fallthrough)
branch  5 taken 64%
branch  6 taken 80% (fallthrough)
branch  7 taken 20%
branch  8 taken 92% (fallthrough)
branch  9 taken 8%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 14% (fallthrough)
branch 14 taken 86%
        2:  879:                throw std::invalid_argument("Integer::Integer()");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 0%
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  880:
        -:  881:
        -:  882:            
        -:  883:            //*this=pow_aux(e, *this);
       12:  884:            if (e==0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  885:                *this= Integer <T,C> (1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  886:                return *this;
        -:  887:            }
       12:  888:            else if (e==1)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        9:  889:                return *this;
        -:  890:            else{
        3:  891:                Integer <T,C> temp1(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  892:                Integer <T,C> temp2(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        6:  893:                Integer <T,C> temp3(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        3:  894:             *this=temp1.pow(e/2)*temp2.pow(e/2)*temp3.pow(e%2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
        6:  895:             return *this;}
call    0 returned 100%
call    1 never executed
        -:  896:        }
        -:  897:      
        -:  898:            
        -:  899:
        -:  900:
        -:  901:
        -:  902:
        -:  903:
        -:  904:};
        -:  905:#endif // Integer_h
