        -:    0:Source:Integer.h
        -:    0:Graph:TestInteger.gcno
        -:    0:Data:TestInteger.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ------------------------------
        -:    2:// projects/c++/integer/Integer.h
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ------------------------------
        -:    6:
        -:    7:#ifndef Integer_h
        -:    8:#define Integer_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <cassert>   // assert
        -:   15:#include <iostream>  // ostream
        -:   16:#include <stdexcept> // invalid_argument
        -:   17:#include <string>    // string
        -:   18:#include <vector>    // vector
        -:   19:#include <deque>
        -:   20:// -----------------
        -:   21:// shift_left_digits
        -:   22:// -----------------
        -:   23:
        -:   24:/**
        -:   25: * @param b an iterator to the beginning of an input  sequence (inclusive)
        -:   26: * @param e an iterator to the end       of an input  sequence (exclusive)
        -:   27: * @param x an iterator to the beginning of an output sequence (inclusive)
        -:   28: * @return  an iterator to the end       of an output sequence (exclusive)
        -:   29: * the sequences are of decimal digits
        -:   30: * output the shift left of the input sequence into the output sequence
        -:   31: * ([b, e) << n) => x
        -:   32: */
        -:   33:using namespace std;
        -:   34:template <typename II, typename OI>
function _Z17shift_left_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_iS7_ called 3 returned 100% blocks executed 100%
        3:   35:OI shift_left_digits (II b, II e, int n, OI x) {
        -:   36:    	// <your code> - edited
        -:   37:	//this is if we have the least significant digit first
       22:   38:	while (n > 0){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
       16:   39:                *x = 0;
call    0 returned 100%
       16:   40:                ++x;
call    0 returned 100%
       16:   41:		--n;
        -:   42:        }
       14:   43:	while(b != e){
call    0 returned 100%
branch  1 taken 73%
branch  2 taken 27% (fallthrough)
        8:   44:		*x = *b;
call    0 returned 100%
call    1 returned 100%
        8:   45:		++x;
call    0 returned 100%
        8:   46:		++b;
call    0 returned 100%
        -:   47:	}
        -:   48:	
        3:   49:    	return x;}
        -:   50:
        -:   51:// ------------------
        -:   52:// shift_right_digits
        -:   53:// ------------------
        -:   54:
        -:   55:/**
        -:   56: * @param b an iterator to the beginning of an input  sequence (inclusive)
        -:   57: * @param e an iterator to the end       of an input  sequence (exclusive)
        -:   58: * @param x an iterator to the beginning of an output sequence (inclusive)
        -:   59: * @return  an iterator to the end       of an output sequence (exclusive)
        -:   60: * the sequences are of decimal digits
        -:   61: * output the shift right of the input sequence into the output sequence
        -:   62: * ([b, e) >> n) => x
        -:   63: */
        -:   64:template <typename II, typename OI>
function _Z18shift_right_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_iS7_ called 3 returned 100% blocks executed 100%
        3:   65:OI shift_right_digits (II b, II e, int n, OI x) {
        -:   66:    	// <your code> - edited
        3:   67:	b += n;
call    0 returned 100%
       11:   68:	while(b != e){
call    0 returned 100%
branch  1 taken 63%
branch  2 taken 38% (fallthrough)
        5:   69:		*x = *b;
call    0 returned 100%
call    1 returned 100%
        5:   70:		++x;
call    0 returned 100%
        5:   71:		++b;
call    0 returned 100%
        -:   72:	}
        3:   73:    	return x;}
        -:   74:
        -:   75:// -----------
        -:   76:// plus_digits
        -:   77:// -----------
        -:   78:
        -:   79:/**
        -:   80: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:   81: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:   82: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:   83: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:   84: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:   85: * @return   an iterator to the end       of an output sequence (exclusive)
        -:   86: * the sequences are of decimal digits
        -:   87: * output the sum of the two input sequences into the output sequence
        -:   88: * ([b1, e1) + [b2, e2)) => x
        -:   89: */
        -:   90:template <typename II1, typename II2, typename OI>
function _Z11plus_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_S6_ET1_T_S8_T0_S9_S7_ called 3 returned 100% blocks executed 100%
        3:   91:OI plus_digits (II1 b1, II1 e1, II2 b2, II2 e2, OI x) {
        -:   92:    	// <your code> - edited
        3:   93:	int carry = 0;
       15:   94:	while(b1 != e1 || b2 != e2){
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
call    3 returned 100%
branch  4 taken 40% (fallthrough)
branch  5 taken 60%
branch  6 taken 75%
branch  7 taken 25% (fallthrough)
        9:   95:		*x += carry;
call    0 returned 100%
        9:   96:		if(b1 != e1){
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
        7:   97:			*x += *b1;
call    0 returned 100%
call    1 returned 100%
        7:   98:			++b1;
call    0 returned 100%
        -:   99:		}
        9:  100:		if(b2 != e2){
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
        8:  101:			*x += *b2;
call    0 returned 100%
call    1 returned 100%
        8:  102:			++b2;
call    0 returned 100%
        -:  103:		}
        9:  104:		carry = *x / 10;
call    0 returned 100%
        9:  105:		*x %= 10;
call    0 returned 100%
        9:  106:		++x;
call    0 returned 100%
        -:  107:	}
        3:  108:	if(carry != 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  109:		*x = carry;
call    0 returned 100%
        1:  110:		++x;
call    0 returned 100%
        -:  111:	}
        3:  112:    	return x;}
        -:  113:
        -:  114:// ------------
        -:  115:// minus_digits
        -:  116:// ------------
        -:  117:
        -:  118:/**
        -:  119: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:  120: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:  121: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:  122: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:  123: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:  124: * @return   an iterator to the end       of an output sequence (exclusive)
        -:  125: * the sequences are of decimal digits
        -:  126: * output the difference of the two input sequences into the output sequence
        -:  127: * ([b1, e1) - [b2, e2)) => x
        -:  128: */
        -:  129:template <typename II1, typename II2, typename OI>
function _Z12minus_digitsIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EES9_ET1_T_SB_T0_SC_SA_ called 0 returned 0% blocks executed 0%
function _Z12minus_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS1_IPKiS5_EES6_ET1_T_SB_T0_SC_SA_ called 3 returned 100% blocks executed 100%
function _Z12minus_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_S6_ET1_T_S8_T0_S9_S7_ called 3 returned 100% blocks executed 95%
        6:  130:OI minus_digits (II1 b1, II1 e1, II2 b2, II2 e2, OI x) {
        -:  131:    	// <your code> - editing
        6:  132:	bool remove = false;
       29:  133:	while(b1 != e1){
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 73%
branch  5 taken 27% (fallthrough)
call    6 returned 100%
branch  7 taken 75%
branch  8 taken 25% (fallthrough)
       17:  134:        int temp = *b1;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       17:  135:		if(remove){
branch  0 never executed
branch  1 never executed
branch  2 taken 38% (fallthrough)
branch  3 taken 63%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
        6:  136:			--temp;
        6:  137:			remove = false;
        -:  138:		}
       17:  139:		if(b2 != e2){
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 63% (fallthrough)
branch  5 taken 38%
call    6 returned 100%
branch  7 taken 78% (fallthrough)
branch  8 taken 22%
       12:  140:			int temp2 = *b2;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       12:  141:			if(temp < temp2){
branch  0 never executed
branch  1 never executed
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
        4:  142:				remove = true;
        4:  143:				temp += 10;
        -:  144:			}
       12:  145:			*x = temp - temp2;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       12:  146:			++b2;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  147:		}
        -:  148:		else{
        5:  149:			if (temp == -1){
branch  0 never executed
branch  1 never executed
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  150:				temp += 10;
        2:  151:				remove = true;
        -:  152:			}
        5:  153:			*x = temp;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  154:		}
       17:  155:		++b1;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
       17:  156:		++x;
call    0 never executed
call    1 returned 100%
call    2 returned 100%
        -:  157:		
        -:  158:	}
        -:  159:	
        6:  160:    	return x;}
        -:  161:
        -:  162:// -----------------
        -:  163:// multiplies_digits
        -:  164:// -----------------
        -:  165:
        -:  166:/**
        -:  167: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:  168: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:  169: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:  170: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:  171: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:  172: * @return   an iterator to the end       of an output sequence (exclusive)
        -:  173: * the sequences are of decimal digits
        -:  174: * output the product of the two input sequences into the output sequence
        -:  175: * ([b1, e1) * [b2, e2)) => x
        -:  176: */
        -:  177:
        -:  178:template <typename II1, typename II2, typename FI>
function _Z17multiplies_digitsIN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEENS1_IPiS6_EES9_ET1_T_SB_T0_SC_SA_ called 5 returned 100% blocks executed 96%
function _Z17multiplies_digitsIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_S6_ET1_T_S8_T0_S9_S7_ called 3 returned 100% blocks executed 96%
        8:  179:FI multiplies_digits (II1 b1, II1 e1, II2 b2, II2 e2, FI x) {
        8:  180:    int add=0;
        8:  181:    auto b2_t = b2;
       32:  182:    while (b1!=e1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 58%
branch  4 taken 42% (fallthrough)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 75%
branch  9 taken 25% (fallthrough)
       16:  183:        auto output = x;
       16:  184:        add=0;
       16:  185:        int carry = 0;
       16:  186:        int var_1 = *b1;
call    0 returned 100%
call    1 returned 100%
        -:  187:        //cout << *b1 << endl;
       16:  188:        b2_t = b2;
       70:  189:        while (b2_t!=e2){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 71%
branch  4 taken 29% (fallthrough)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 70%
branch  9 taken 30% (fallthrough)
       38:  190:            int temp = carry + (var_1 * *b2_t) + *output;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  191:            //cout << temp << "  ";
       38:  192:            carry = temp / 10;
       38:  193:            *output = temp % 10;
call    0 returned 100%
call    1 returned 100%
       38:  194:            ++output;
call    0 returned 100%
call    1 returned 100%
       38:  195:            ++b2_t;
call    0 returned 100%
call    1 returned 100%
        -:  196:        }
       38:  197:        while (carry!=0){
branch  0 taken 30%
branch  1 taken 70% (fallthrough)
branch  2 taken 25%
branch  3 taken 75% (fallthrough)
        6:  198:            ++add;
        6:  199:            *output+=carry%10;
call    0 returned 100%
call    1 returned 100%
        6:  200:            carry/=10;
        6:  201:            ++output;
call    0 returned 100%
call    1 returned 100%
        -:  202:        }
        -:  203:        //cout << endl;
       16:  204:        ++b1;
call    0 returned 100%
call    1 returned 100%
        -:  205:        //++temp;
       16:  206:        ++x;
call    0 returned 100%
call    1 returned 100%
        -:  207:    }
        8:  208:    return x+add;}
call    0 returned 100%
call    1 returned 100%
        -:  209:
        -:  210:
        -:  211:// --------------
        -:  212:// divides_digits
        -:  213:// --------------
        -:  214:
        -:  215:/**
        -:  216: * @param b  an iterator to the beginning of an input  sequence (inclusive)
        -:  217: * @param e  an iterator to the end       of an input  sequence (exclusive)
        -:  218: * @param b2 an iterator to the beginning of an input  sequence (inclusive)
        -:  219: * @param e2 an iterator to the end       of an input  sequence (exclusive)
        -:  220: * @param x  an iterator to the beginning of an output sequence (inclusive)
        -:  221: * @return   an iterator to the end       of an output sequence (exclusive)
        -:  222: * the sequences are of decimal digits
        -:  223: * output the division of the two input sequences into the output sequence
        -:  224: * ([b1, e1) / [b2, e2)) => x
        -:  225: */
        -:  226:template <typename II1, typename II2, typename FI>
        -:  227:FI divides_digits (II1 b1, II1 e1, II2 b2, II2 e2, FI x) {
        -:  228:    // <your code>
        -:  229:    return x;}
        -:  230:
        -:  231:// -------
        -:  232:// Integer
        -:  233:// -------
        -:  234:
        -:  235:template < typename T, typename C = std::vector<T> >
function _ZN7IntegerIiSt6vectorIiSaIiEEEC2ERKS3_ called 6 returned 100% blocks executed 100%
function _ZN7IntegerIiSt6vectorIiSaIiEEEaSEOS3_ called 1 returned 100% blocks executed 100%
function _ZN7IntegerIiSt6vectorIiSaIiEEEaSERKS3_ called 8 returned 100% blocks executed 100%
function _ZN7IntegerIiSt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 100%
function _ZN7IntegerIiSt6vectorIiSaIiEEED2Ev called 48 returned 100% blocks executed 100%
       64:  236:class Integer {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  237:    // -----------
        -:  238:    // operator ==
        -:  239:    // -----------
        -:  240:
        -:  241:    /**
        -:  242:     * <your documentation>
        -:  243:     */
function _ZeqRK7IntegerIiSt6vectorIiSaIiEEES5_ called 11 returned 100% blocks executed 95%
       11:  244:    friend bool operator == (const Integer& lhs, const Integer& rhs) {
        -:  245:        // <your code> - editing
       11:  246:	auto b1 = lhs._x.begin();
call    0 returned 100%
       11:  247:	auto e1 = lhs._x.end();
call    0 returned 100%
       11:  248:	auto b2 = rhs._x.begin();
call    0 returned 100%
       11:  249:	auto e2 = rhs._x.end();
call    0 returned 100%
       11:  250:	if((e2-b2) != (e1-b1))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  251:		return false;
       42:  252:	while(b1 != e1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 71%
branch  4 taken 29% (fallthrough)
       22:  253:		int temp = *b1;
call    0 returned 100%
       22:  254:		int temp2 = *b2;
call    0 returned 100%
        -:  255:		//printf("%d, %d\n", temp, temp2);
       22:  256:		if(temp != temp2)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        2:  257:			return false;
       20:  258:		++b1;
call    0 returned 100%
       20:  259:		++b2;
call    0 returned 100%
        -:  260:	}
        9:  261:        return true;}
        -:  262:
        -:  263:    // -----------
        -:  264:    // operator !=
        -:  265:    // -----------
        -:  266:
        -:  267:    /**
        -:  268:     * <your documentation>
        -:  269:     */
function _ZneRK7IntegerIiSt6vectorIiSaIiEEES5_ called 2 returned 100% blocks executed 100%
        2:  270:    friend bool operator != (const Integer& lhs, const Integer& rhs) {
        2:  271:        return !(lhs == rhs);}
call    0 returned 100%
        -:  272:
        -:  273:    // ----------
        -:  274:    // operator <
        -:  275:    // ----------
        -:  276:
        -:  277:    /**
        -:  278:     * <your documentation>
        -:  279:     */
function _ZltRK7IntegerIiSt6vectorIiSaIiEEES5_ called 4 returned 100% blocks executed 77%
        4:  280:    friend bool operator < (const Integer& lhs, const Integer& rhs) {
        -:  281:        // <your code>
        4:  282:	if(lhs.neg && !rhs.neg)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  283:		return true;
        4:  284:	else if (!lhs.neg && rhs.neg)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  285:		return false;
        -:  286:	else{
        4:  287:        auto b1 = lhs._x.begin();
call    0 returned 100%
        4:  288:        auto e1 = lhs._x.end();
call    0 returned 100%
        4:  289:        auto b2 = rhs._x.begin();
call    0 returned 100%
        4:  290:        auto e2 = rhs._x.end();
call    0 returned 100%
        4:  291:		int l = 0;
        4:  292:		int r = 0;
        4:  293:		int i = 1;
       15:  294:		while(b1 != e1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 64%
branch  4 taken 36% (fallthrough)
        7:  295:			l += (*b1 * i);
call    0 returned 100%
        7:  296:			i *= 10;
        7:  297:			++b1;
call    0 returned 100%
        -:  298:		}	
        4:  299:		i = 1;
       18:  300:		while(b2 != e2){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 71%
branch  4 taken 29% (fallthrough)
       10:  301:                        r += (*b2 * i);
call    0 returned 100%
       10:  302:                        i *= 10;
       10:  303:                        ++b2;
call    0 returned 100%
        -:  304:                }
        4:  305:		if(!lhs.neg && l < r)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:  306:			return true;
    #####:  307:		else if(lhs.neg && r < l)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  308:			return true;
        -:  309:		else
    #####:  310:			return false;	
        -:  311:	}
        -:  312:    }
        -:  313:
        -:  314:    // -----------
        -:  315:    // operator <=
        -:  316:    // -----------
        -:  317:
        -:  318:    /**
        -:  319:     * <your documentation>
        -:  320:     */
        -:  321:    friend bool operator <= (const Integer& lhs, const Integer& rhs) {
        -:  322:        return !(rhs < lhs);}
        -:  323:
        -:  324:    // ----------
        -:  325:    // operator >
        -:  326:    // ----------
        -:  327:
        -:  328:    /**
        -:  329:     * <your documentation>
        -:  330:     */
function _ZgtRK7IntegerIiSt6vectorIiSaIiEEES5_ called 3 returned 100% blocks executed 100%
        3:  331:    friend bool operator > (const Integer& lhs, const Integer& rhs) {
        3:  332:        return (rhs < lhs);}
call    0 returned 100%
        -:  333:
        -:  334:    // -----------
        -:  335:    // operator >=
        -:  336:    // -----------
        -:  337:
        -:  338:    /**
        -:  339:     * <your documentation>
        -:  340:     */
        -:  341:    friend bool operator >= (const Integer& lhs, const Integer& rhs) {
        -:  342:        return !(lhs < rhs);}
        -:  343:
        -:  344:    // ----------
        -:  345:    // operator +
        -:  346:    // ----------
        -:  347:
        -:  348:    /**
        -:  349:     * <your documentation>
        -:  350:     */
        -:  351:    friend Integer operator + (Integer lhs, const Integer& rhs) {
        -:  352:        return lhs += rhs;}
        -:  353:
        -:  354:    // ----------
        -:  355:    // operator -
        -:  356:    // ----------
        -:  357:
        -:  358:    /**
        -:  359:     * <your documentation>
        -:  360:     */
        -:  361:    friend Integer operator - (Integer lhs, const Integer& rhs) {
        -:  362:	return lhs -= rhs;}
        -:  363:
        -:  364:    // ----------
        -:  365:    // operator *
        -:  366:    // ----------
        -:  367:
        -:  368:    /**
        -:  369:     * <your documentation>
        -:  370:     */
function _Zml7IntegerIiSt6vectorIiSaIiEEERKS3_ called 2 returned 100% blocks executed 100%
        2:  371:    friend Integer operator * (Integer lhs, const Integer& rhs) {
        2:  372:        return lhs *= rhs;}
call    0 returned 100%
call    1 returned 100%
        -:  373:
        -:  374:    // ----------
        -:  375:    // operator /
        -:  376:    // ----------
        -:  377:
        -:  378:    /**
        -:  379:     * <your documentation>
        -:  380:     * @throws invalid_argument if (rhs == 0)
        -:  381:     */
        -:  382:    friend Integer operator / (Integer lhs, const Integer& rhs) {
        -:  383:        return lhs /= rhs;}
        -:  384:
        -:  385:    // ----------
        -:  386:    // operator %
        -:  387:    // ----------
        -:  388:
        -:  389:    /**
        -:  390:     * <your documentation>
        -:  391:     * @throws invalid_argument if (rhs <= 0)
        -:  392:     */
        -:  393:    friend Integer operator % (Integer lhs, const Integer& rhs) {
        -:  394:        return lhs %= rhs;}
        -:  395:
        -:  396:    // -----------
        -:  397:    // operator <<
        -:  398:    // -----------
        -:  399:
        -:  400:    /**
        -:  401:     * <your documentation>
        -:  402:     * @throws invalid_argument if (rhs < 0)
        -:  403:     */
        -:  404:    friend Integer operator << (Integer lhs, int rhs) {
        -:  405:        return lhs <<= rhs;}
        -:  406:
        -:  407:    // -----------
        -:  408:    // operator >>
        -:  409:    // -----------
        -:  410:
        -:  411:    /**
        -:  412:     * <your documentation>
        -:  413:     * @throws invalid_argument if (rhs < 0)
        -:  414:     */
        -:  415:    friend Integer operator >> (Integer lhs, int rhs) {
        -:  416:        return lhs >>= rhs;}
        -:  417:
        -:  418:    // -----------
        -:  419:    // operator <<
        -:  420:    // -----------
        -:  421:
        -:  422:    /**
        -:  423:     * <your documentation>
        -:  424:     */
        -:  425:    friend std::ostream& operator << (std::ostream& lhs, const Integer& rhs) {
        -:  426:        	// <your code> - edited
        -:  427:		auto e = rhs._x.end();
        -:  428:		auto b = rhs._x.begin();
        -:  429:		while(e != b){
        -:  430:			--e;
        -:  431:            lhs << *e;
        -:  432:				
        -:  433:		}
        -:  434:        	return lhs << std::endl;}
        -:  435:
        -:  436:    // ---
        -:  437:    // abs
        -:  438:    // ---
        -:  439:
        -:  440:    /**
        -:  441:     * absolute value
        -:  442:     * <your documentation>
        -:  443:     */
        -:  444:    friend Integer abs (Integer x) {
        -:  445:        return x.abs();}
        -:  446:
        -:  447:    // ---
        -:  448:    // pow
        -:  449:    // ---
        -:  450:
        -:  451:    /**
        -:  452:     * power
        -:  453:     * <your documentation>
        -:  454:     * @throws invalid_argument if ((x == 0) && (e == 0)) || (e < 0)
        -:  455:     */
        -:  456:    friend Integer pow (Integer x, int e) {
        -:  457:        return x.pow(e);}
        -:  458:
        -:  459:    private:
        -:  460:        // ----
        -:  461:        // data
        -:  462:        // ----
        -:  463:
        -:  464:        C _x; // the backing container
        -:  465:        // <your data>
        -:  466:	bool neg;
        -:  467:
        -:  468:    private:
        -:  469:        // -----
        -:  470:        // valid
        -:  471:        // -----
        -:  472:
function _ZNK7IntegerIiSt5dequeIiSaIiEEE5validEv called 1 returned 100% blocks executed 84%
function _ZNK7IntegerIiSt6vectorIiSaIiEEE5validEv called 44 returned 100% blocks executed 95%
       45:  473:        bool valid () const { // class invariant
       45:  474:            auto iter = _x.begin();
call    0 returned 100%
call    1 returned 100%
      240:  475:            while (iter != _x.end()){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 90%
branch  5 taken 10% (fallthrough)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 77%
branch 11 taken 23% (fallthrough)
      152:  476:                if (*iter<0 || *iter>9)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 returned 100%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        2:  477:                    return false;
      150:  478:                ++iter;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  479:            }
       43:  480:            return true;}
        -:  481:
        -:  482:    public:
        -:  483:        // ------------
        -:  484:        // constructors
        -:  485:        // ------------
        -:  486:
        -:  487:        /**
        -:  488:         * <your documentation>
        -:  489:         */
function _ZN7IntegerIiSt5dequeIiSaIiEEEC2Ei called 1 returned 100% blocks executed 69%
function _ZN7IntegerIiSt6vectorIiSaIiEEEC2Ei called 41 returned 100% blocks executed 81%
       42:  490:        Integer (int value) {
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 never executed
        -:  491:            	// <your code> - edited
       42:  492:		if(value == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
       11:  493:			_x.push_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  494:		}
        -:  495:		else{
      139:  496:			while(value != 0){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
branch  2 taken 69%
branch  3 taken 31% (fallthrough)
       77:  497:				_x.push_back(value % 10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       77:  498:				value /= 10;
        -:  499:			}
       31:  500:			neg = value<0;
        -:  501:		}
       42:  502:        assert(valid());}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  503:
        -:  504:        /**
        -:  505:         * <your documentation>
        -:  506:         * @throws invalid_argument if value is not a valid representation of an Integer
        -:  507:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEEC2ERKSs called 3 returned 33% blocks executed 74%
        5:  508:        explicit Integer (const std::string& value) {
call    0 returned 100%
call    1 returned 100%
        3:  509:            bool is_neg=false;
        3:  510:            if (value[0]=='-'){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  511:                neg=true;
    #####:  512:                is_neg=true;
        -:  513:            }
       66:  514:            for (int c= value.size()-1; c>=1; c--){
call    0 returned 100%
branch  1 taken 95%
branch  2 taken 5% (fallthrough)
       63:  515:                _x.push_back((int)(value[c]-'0'));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  516:            }
        3:  517:            if (!is_neg){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  518:                _x.push_back((int)value[0]-'0');
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  519:            }
        3:  520:            if (!valid())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
        2:  521:                throw std::invalid_argument("Integer::Integer()");}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
call   13 never executed
        -:  522:
        -:  523:        // Default copy, destructor, and copy assignment.
        -:  524:        // Integer (const Integer&);
        -:  525:        // ~Integer ();
        -:  526:        // Integer& operator = (const Integer&);
        -:  527:
        -:  528:        // ----------
        -:  529:        // operator -
        -:  530:        // ----------
        -:  531:
        -:  532:        /**
        -:  533:         * <your documentation>
        -:  534:         */
        -:  535:        Integer operator - () const {
        -:  536:            	// <your code> - edited
        -:  537:		neg = (!neg);
        -:  538:        	return *this;}
        -:  539:
        -:  540:        // -----------
        -:  541:        // operator ++
        -:  542:        // -----------
        -:  543:
        -:  544:        /**
        -:  545:         * <your documentation>
        -:  546:         */
        -:  547:        Integer& operator ++ () {
        -:  548:            *this += 1;
        -:  549:            return *this;}
        -:  550:
        -:  551:        /**
        -:  552:         * <your documentation>
        -:  553:         */
        -:  554:        Integer operator ++ (int) {
        -:  555:            Integer x = *this;
        -:  556:            ++(*this);
        -:  557:            return x;}
        -:  558:
        -:  559:        // -----------
        -:  560:        // operator --
        -:  561:        // -----------
        -:  562:
        -:  563:        /**
        -:  564:         * <your documentation>
        -:  565:         */
        -:  566:        Integer& operator -- () {
        -:  567:            *this -= 1;
        -:  568:            return *this;}
        -:  569:
        -:  570:        /**
        -:  571:         * <your documentation>
        -:  572:         */
        -:  573:        Integer operator -- (int) {
        -:  574:            Integer x = *this;
        -:  575:            --(*this);
        -:  576:            return x;}
        -:  577:
        -:  578:        // -----------
        -:  579:        // operator +=
        -:  580:        // -----------
        -:  581:
        -:  582:        /**
        -:  583:         * <your documentation>
        -:  584:         */
        -:  585:        Integer& operator += (const Integer& rhs) {
        -:  586:            // <your code>
        -:  587:            auto b1 = _x.begin();
        -:  588:            auto e1 = _x.end();
        -:  589:            auto b2 = rhs._x.begin();
        -:  590:            auto e2 = rhs._x.end();
        -:  591:             int size= rhs._x.size()+_x.size();
        -:  592:            Integer <T,C> temp (0);
        -:  593:            for (int i=0; i<size; i++)
        -:  594:                temp._x.push_back(0);
        -:  595:        
        -:  596:            plus_digits (b1, e1, b2, e2, temp._x.begin());
        -:  597:            //printf ("%d %d %d %d \n", _x[0], _x[1], _x[2], _x[3]);
        -:  598:            auto iter_end = temp._x.end();
        -:  599:            
        -:  600:            if (*(--iter_end)==0 && temp._x.size()!=0){
        -:  601:                temp._x.resize(--size);
        -:  602:            }
        -:  603:            //printf ("size is %d", _x.size()); 
        -:  604:            //_x=temp;
        -:  605:            *this=temp;
        -:  606:            return *this;}
        -:  607:
        -:  608:        // -----------
        -:  609:        // operator -=
        -:  610:        // -----------
        -:  611:
        -:  612:        /**
        -:  613:         * <your documentation>
        -:  614:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEEmIERKS3_ called 3 returned 100% blocks executed 78%
        3:  615:        Integer& operator -= (const Integer& rhs) {
        3:  616:            Integer<T, C> temp (0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  617:           int size= rhs._x.size()+_x.size(); 
call    0 returned 100%
call    1 returned 100%
        -:  618:           /* if(!neg && rhs.neg){
        -:  619:                //rhs.neg = false;
        -:  620:                *this += rhs;
        -:  621:                neg = false;
        -:  622:                return *this;
        -:  623:            }
        -:  624:            else if(neg && !rhs.neg){
        -:  625:                neg = false;
        -:  626:                *this += rhs;
        -:  627:                neg = true;
        -:  628:                return *this;
        -:  629:            }
        -:  630:            else if(neg && rhs.neg){
        -:  631:                for (int i=0; i<size; i++)
        -:  632:                     temp._x.push_back(0);
        -:  633:                //neg=false;
        -:  634:                //rhs.neg=false;
        -:  635:                bool normal =  (*this < rhs);
        -:  636:                if (normal){
        -:  637:                    minus_digits (_x.begin(), _x.end(), rhs._x.begin(), rhs._x.end(), temp._x.begin());
        -:  638:                }
        -:  639:                else{
        -:  640:                    minus_digits (rhs._x.begin(), rhs._x.end(), _x.begin(), _x.end(), temp._x.begin());
        -:  641:                }
        -:  642:
        -:  643:                temp.neg = normal ? rhs.neg:neg;
        -:  644:
        -:  645:            }
        -:  646:            else{*/
        -:  647:                
       16:  648:                for (int i=0; i<size; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       13:  649:                    temp._x.push_back(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  650:
        -:  651:                
        -:  652:		
        3:  653:		bool normal = *this>rhs;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  654:		
        3:  655:		if(_x.size() > rhs._x.size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        1:  656:			normal = true;
        2:  657:		else if(_x.size() < rhs._x.size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  658:			normal  = false;
        -:  659:
        3:  660:                if (normal){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  661:                    minus_digits (_x.begin(), _x.end(), rhs._x.begin(), rhs._x.end(), temp._x.begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
        3:  662:                    temp.neg = false;
        -:  663:                }
        -:  664:                else{
    #####:  665:                    minus_digits (rhs._x.begin(), rhs._x.end(), _x.begin(), _x.end(), temp._x.begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  666:                    temp.neg = true;
        -:  667:                }
        -:  668:            //}
        3:  669:            auto iter_end = temp._x.end();
call    0 returned 100%
       15:  670:            while (*(--iter_end)==0 && temp._x.size()>1){ 
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 75%
branch  8 taken 25% (fallthrough)
        9:  671:		temp._x.pop_back();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  672:            }
        -:  673:
        3:  674:            *this=temp;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  675:            return *this;}
call    0 returned 100%
call    1 never executed
        -:  676:
        -:  677:        // -----------
        -:  678:        // operator *=
        -:  679:        // -----------
        -:  680:
        -:  681:        /**
        -:  682:         * <your documentation>
        -:  683:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEEmLERKS3_ called 5 returned 100% blocks executed 91%
        5:  684:        Integer& operator *= (const Integer& rhs) {
        5:  685:            int size= rhs._x.size()+_x.size();
call    0 returned 100%
call    1 returned 100%
        5:  686:            Integer <T,C> temp (0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       23:  687:            for (int i=0; i<size; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
       18:  688:                temp._x.push_back(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  689:            /*
        -:  690:             * Integer <T,C> temp (0);
        -:  691:            for (int c=0;c<_x.size();c++)
        -:  692:                temp._x.push_back(_x[c];
        -:  693:            _x.clear();
        -:  694:            for (int i=0; i<size; i++)
        -:  695:                _x.push_back(0);
        -:  696:            */
        5:  697:            multiplies_digits (rhs._x.begin(), rhs._x.end(), _x.begin(), _x.end(), temp._x.begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
        -:  698:            //printf ("%d %d %d %d \n", _x[0], _x[1], _x[2], _x[3]);
        5:  699:            auto iter_end = temp._x.end();
call    0 returned 100%
        -:  700:            
       21:  701:            while (*(--iter_end)==0 && temp._x.size()>1){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
call    4 returned 100%
branch  5 taken 92% (fallthrough)
branch  6 taken 8%
branch  7 taken 69%
branch  8 taken 31% (fallthrough)
       11:  702:                temp._x.pop_back(); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  703:            }
        -:  704:	     
        -:  705:            //_x=temp;
        5:  706:            *this=temp;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  707:            return *this;}
call    0 returned 100%
call    1 never executed
        -:  708:
        -:  709:        // -----------
        -:  710:        // operator /=
        -:  711:        // -----------
        -:  712:
        -:  713:        /**
        -:  714:         * <your documentation>
        -:  715:         * @throws invalid_argument if (rhs == 0)
        -:  716:         */
        -:  717:        Integer& operator /= (const Integer& rhs) {
        -:  718:            // <your code>
        -:  719:            return *this;}
        -:  720:
        -:  721:        // -----------
        -:  722:        // operator %=
        -:  723:        // -----------
        -:  724:
        -:  725:        /**
        -:  726:         * <your documentation>
        -:  727:         * @throws invalid_argument if (rhs <= 0)
        -:  728:         */
        -:  729:        Integer& operator %= (const Integer& rhs) {
        -:  730:            // <your code>
        -:  731:            return *this;}
        -:  732:
        -:  733:        // ------------
        -:  734:        // operator <<=
        -:  735:        // ------------
        -:  736:
        -:  737:        /**
        -:  738:         * <your documentation>
        -:  739:         */
        -:  740:        Integer& operator <<= (int n) {
        -:  741:            // <your code>
        -:  742:            return *this;}
        -:  743:
        -:  744:        // ------------
        -:  745:        // operator >>=
        -:  746:        // ------------
        -:  747:
        -:  748:        /**
        -:  749:         * <your documentation>
        -:  750:         */
        -:  751:        Integer& operator >>= (int n) {
        -:  752:            // <your code>
        -:  753:            return *this;}
        -:  754:
        -:  755:        // ---
        -:  756:        // abs
        -:  757:        // ---
        -:  758:
        -:  759:        /**
        -:  760:         * absolute value
        -:  761:         * <your documentation>
        -:  762:         */
        -:  763:        Integer& abs () {
        -:  764:            neg=false;
        -:  765:            // <your code>
        -:  766:            return *this;}
        -:  767:
        -:  768:        // ---
        -:  769:        // pow
        -:  770:        // ---
        -:  771:
        -:  772:        /**
        -:  773:         * power
        -:  774:         * <your documentation>
        -:  775:         * @throws invalid_argument if ((this == 0) && (e == 0)) or (e < 0)
        -:  776:         */
function _ZN7IntegerIiSt6vectorIiSaIiEEE3powEi called 4 returned 100% blocks executed 61%
        4:  777:        Integer& pow (int e) {
        -:  778:            //*this=pow_aux(e, *this);
        4:  779:            if (e==0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  780:                *this= Integer <T,C> (1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  781:                return *this;
        -:  782:            }
        4:  783:            else if (e==1)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  784:                return *this;
        -:  785:            else{
        1:  786:                Integer <T,C> copy1(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  787:                Integer <T,C> copy2(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        2:  788:                Integer <T,C> copy3(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1:  789:             *this=copy1.pow(e/2)*copy2.pow(e/2)*copy3.pow(e%2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
        2:  790:             return *this;}
call    0 returned 100%
call    1 never executed
        -:  791:        }
        -:  792:      
        -:  793:            
        -:  794:
        -:  795:
        -:  796:
        -:  797:
        -:  798:
        -:  799:};
        -:  800:#endif // Integer_h
